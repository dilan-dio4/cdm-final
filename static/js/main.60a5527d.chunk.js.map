{"version":3,"sources":["components/NavBar.js","components/CTAText.js","components/Game.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","useContext","AppContext","darkModeChecked","setDarkModeChecked","className","variant","style","display","alignItems","paddingRight","paddingTop","checked","onChange","CTAText","padding","color","Square","props","onClick","value","Board","boardStates","i","rowStates","j","push","state","states","player1","gameOver","winner","c","this","newStates","setState","r","squareValue","squareColor","handleClick","board","currentStates","row","renderSquare","checkWin","message","getRow","React","Component","Game","Footer","createContext","App","useState","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kSAIe,SAASA,IACvB,IAAD,EAEoDC,qBAAWC,GAAnDC,EAFZ,EAEYA,gBAAiBC,EAF7B,EAE6BA,mBAEzB,OACI,yBAAKC,UAAWF,EAAkB,mBAAqB,qBACnD,yBAAKE,UAAU,6BACX,kBAAC,IAAD,CAAMC,QAAQ,MAAd,kBACA,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,WACvC,kBAAC,IAAD,CAAMH,QAAQ,KAAKC,MAAO,CAAEG,aAAc,GAAIC,WAAY,IAA1D,aACA,kBAAC,IAAD,CAAQC,QAAST,EAAiBU,SAAW,kBAAMT,GAAoBD,SCX5E,SAASW,IACvB,IAEWX,EAAoBF,qBAAWC,GAA/BC,gBAER,OACI,kBAAC,IAAD,CAAMG,QAAQ,YAAYC,MAAO,CAAEQ,QAAS,gBAAiBC,MAAOb,EAAkB,QAAU,UAAhG,e,oCCRR,SAASc,EAAOC,GACd,OACE,4BAAQb,UAAWa,EAAMF,MAAOG,QAASD,EAAMC,SAC5CD,EAAME,O,IAKLC,E,kDAEJ,WAAYH,GAAO,IAAD,sBACd,cAAMA,GAIN,IAFA,IAAII,EAAc,GAEVC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtB,IADA,IAAIC,EAAY,GACRC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAUE,KAAK,KAEnBJ,EAAYI,KAAKF,GAVP,OAad,EAAKG,MAAQ,CACTC,OAAQN,EACRO,SAAS,EACTC,UAAU,EACVC,OAAQ,QAjBE,E,wDAqBNC,GACV,IAAIC,KAAKN,MAAMG,SACb,IAAI,IAAIP,EAAI,EAAGA,GAAK,EAAGA,IACrB,GAA8B,KAA3BU,KAAKN,MAAMC,OAAOL,GAAGS,GAAU,CAChC,IAAIE,EAAYD,KAAKN,MAAMC,OAS3B,OARGK,KAAKN,MAAME,QACZK,EAAUX,GAAGS,GAAK,IAGlBE,EAAUX,GAAGS,GAAK,IAEpBC,KAAKE,SAAS,CAACP,OAAQM,SACvBD,KAAKE,SAAS,CAACN,SAAUI,KAAKN,MAAME,a,mCAO/BO,EAAEJ,GAAI,IAAD,OACZK,EAAc,KACdC,EAAc,KAclB,MAb8B,KAA3BL,KAAKN,MAAMC,OAAOQ,GAAGJ,IACtBK,EAAc,IACdC,EAAc,UAEmB,KAA3BL,KAAKN,MAAMC,OAAOQ,GAAGJ,IAC3BK,EAAc,IACdC,EAAc,eAERL,KAAKN,MAAMC,OAAOQ,GAAGJ,GAAK,OAChCK,EAAc,IACdC,EAAc,iBAGT,kBAACrB,EAAD,CAAQG,MAAOiB,EAAalB,QAAS,kBAAM,EAAKoB,YAAYP,IAAIhB,MAAOsB,M,6BAGzEE,EAAOjB,GACZ,OAAOiB,EAAMjB,K,iCAOb,IAFA,IAAIkB,EAAgBR,KAAKN,MAAMC,OAEvBQ,EAAI,EAAGA,EAAI,EAAGA,IACpB,IAAI,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxB,GAA0B,KAAvBS,EAAcL,GAAGJ,IAAsC,KAAzBS,EAAcL,GAAGJ,EAAE,IAAsC,KAAzBS,EAAcL,GAAGJ,EAAE,IAAqC,KAAxBS,EAAcL,GAAGJ,EAAE,GAGlH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAGtB,GAA0B,KAAvBW,EAAcL,GAAGJ,IAAsC,KAAzBS,EAAcL,GAAGJ,EAAE,IAAsC,KAAzBS,EAAcL,GAAGJ,EAAE,IAAqC,KAAxBS,EAAcL,GAAGJ,EAAE,GAGvH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAO/B,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IACpB,IAAI,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxB,GAA0B,KAAvBS,EAAcL,GAAGJ,IAAsC,KAAzBS,EAAcL,EAAE,GAAGJ,IAAsC,KAAzBS,EAAcL,EAAE,GAAGJ,IAAqC,KAAxBS,EAAcL,EAAE,GAAGJ,GAGlH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAGtB,GAA0B,KAAvBW,EAAcL,GAAGJ,IAAsC,KAAzBS,EAAcL,EAAE,GAAGJ,IAAsC,KAAzBS,EAAcL,EAAE,GAAGJ,IAAqC,KAAxBS,EAAcL,EAAE,GAAGJ,GAGvH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAO/B,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IACpB,IAAI,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxB,GAA0B,KAAvBS,EAAcL,GAAGJ,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAuC,KAA1BS,EAAcL,EAAE,GAAGJ,EAAE,GAGxH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAGtB,GAA0B,KAAvBW,EAAcL,GAAGJ,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAuC,KAA1BS,EAAcL,EAAE,GAAGJ,EAAE,GAG7H,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAO/B,IAAI,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IACpB,IAAI,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxB,GAA0B,KAAvBS,EAAcL,GAAGJ,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAuC,KAA1BS,EAAcL,EAAE,GAAGJ,EAAE,GAGxH,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,IAGtB,GAA0B,KAAvBW,EAAcL,GAAGJ,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAwC,KAA3BS,EAAcL,EAAE,GAAGJ,EAAE,IAAuC,KAA1BS,EAAcL,EAAE,GAAGJ,EAAE,GAG7H,OAFAC,KAAKE,SAAS,CAACJ,OAAQ,kBACvBE,KAAKE,SAAS,CAACL,UAAU,O,+BAa/B,IAFA,IAAIU,EAAQ,GAEHJ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IADA,IAAIM,EAAM,GACDV,EAAI,EAAGA,EAAI,EAAGA,IACnBU,EAAIhB,KAAKO,KAAKU,aAAaP,EAAGJ,IAElCQ,EAAMd,KAAKgB,GAGXT,KAAKN,MAAMG,UACbG,KAAKW,WAEL,IAAIC,EAAU,GAOhB,OAFEA,EAJEZ,KAAKN,MAAMG,SAIHG,KAAKN,MAAMI,OAAS,SAHpB,SAAWE,KAAKN,MAAME,QAAU,aAAe,cAAgB,QAMzE,6BACE,6BACE,yBAAKxB,UAAU,aACZ4B,KAAKa,OAAON,EAAO,IAEtB,yBAAKnC,UAAU,aACZ4B,KAAKa,OAAON,EAAO,IAEtB,yBAAKnC,UAAU,aACZ4B,KAAKa,OAAON,EAAO,IAEtB,yBAAKnC,UAAU,aACZ4B,KAAKa,OAAON,EAAO,IAEtB,yBAAKnC,UAAU,aACZ4B,KAAKa,OAAON,EAAO,IAEtB,yBAAKnC,UAAU,aACZ4B,KAAKa,OAAON,EAAO,KAIxB,6BACGK,Q,GArLSE,IAAMC,WA6Lb,SAASC,IAGpB,OACI,yBAAK5C,UAAU,aACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,QCxMD,SAAS6C,IACvB,IAEW/C,EAAoBF,qBAAWC,GAA/BC,gBAER,OACI,yBAAKE,UAAYF,EAAkB,mBAAqB,qBACpD,kBAAC,IAAD,CAAMG,QAAQ,KAAKC,MAAO,CAAES,MAAOb,EAAkB,QAAU,UAAa,iFCJjF,IAAMD,EAAaiD,0BAEX,SAASC,IAAO,IAAD,EAEsBC,oBAAS,GAF/B,mBAElBlD,EAFkB,KAEDC,EAFC,KAK1B,OACI,yBAAKC,UAAU,OACX,kBAACH,EAAWoD,SAAZ,CAAqBlC,MAAO,CAAEjB,kBAAiBC,uBAC3C,kBAACJ,EAAD,MACA,yBAAKK,UAAYF,EAAkB,YAAc,cAC7C,kBAACW,EAAD,MACA,kBAACmC,EAAD,OAEJ,kBAACC,EAAD,Q,WCXIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,MAAOA,KACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5B,c","file":"static/js/main.60a5527d.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport { Text, Switch } from '@smooth-ui/core-sc'\r\nimport { AppContext } from '../App'\r\n\r\nexport default function NavBar()\r\n{\r\n\r\n    const { darkModeChecked, setDarkModeChecked } = useContext(AppContext)\r\n\r\n    return (\r\n        <div className={darkModeChecked ? 'NavBar-root-dark' : 'NavBar-root-light'}>\r\n            <div className=\"NavBar-elements-container\">\r\n                <Text variant=\"h2\">Connect 4 Game</Text>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Text variant=\"h5\" style={{ paddingRight: 20, paddingTop: 4 }}>Dark Mode</Text>\r\n                    <Switch checked={darkModeChecked} onChange={ () => setDarkModeChecked(!darkModeChecked) } />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { Text } from '@smooth-ui/core-sc'\r\nimport { AppContext } from '../App'\r\n\r\nexport default function CTAText()\r\n{\r\n\r\n    const { darkModeChecked } = useContext(AppContext)\r\n\r\n    return (\r\n        <Text variant=\"display-3\" style={{ padding: '100px 0 8vh 0', color: darkModeChecked ? \"white\" : \"black\" }} >Play Below!</Text>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className={props.color} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\n  class Board extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        let boardStates = []\r\n        \r\n        for(let i = 0; i < 6; i++){\r\n            let rowStates = []\r\n            for(let j = 0; j < 7; j++){\r\n                rowStates.push('0')\r\n            }\r\n            boardStates.push(rowStates)\r\n        }\r\n\r\n        this.state = {\r\n            states: boardStates,\r\n            player1: true,\r\n            gameOver: false,\r\n            winner: 'none',\r\n        }\r\n    }\r\n\r\n    handleClick(c){\r\n      if(!this.state.gameOver){\r\n        for(var i = 5; i >= 0; i--){\r\n          if(this.state.states[i][c] == '0'){\r\n            var newStates = this.state.states\r\n            if(this.state.player1){\r\n              newStates[i][c] = '1'\r\n            }\r\n            else {\r\n              newStates[i][c] = '2'\r\n            }\r\n            this.setState({states: newStates})\r\n            this.setState({player1: !this.state.player1})\r\n            return\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    renderSquare(r,c) {\r\n      var squareValue = null;\r\n      var squareColor = null;\r\n      if(this.state.states[r][c] == '0'){\r\n        squareValue = \" \"\r\n        squareColor = \"square\"\r\n      }\r\n      else if(this.state.states[r][c] == '1'){\r\n        squareValue = \"O\"\r\n        squareColor = \"red-square\"\r\n      }\r\n      else if(this.state.states[r][c] = '2'){\r\n        squareValue = \"O\"\r\n        squareColor = \"yellow-square\"\r\n      }\r\n        \r\n      return <Square value={squareValue} onClick={() => this.handleClick(c)} color={squareColor}/>;\r\n    }\r\n\r\n    getRow(board ,i){\r\n      return board[i];\r\n    }\r\n\r\n    checkWin(){\r\n      \r\n      let currentStates = this.state.states\r\n      //check horizontal win\r\n      for(let r = 0; r < 6; r++){\r\n        for(let c = 0; c < 4; c++){\r\n          if(currentStates[r][c] == '1' && currentStates[r][c+1] == '1' && currentStates[r][c+2] == '1' && currentStates[r][c+3] =='1'){\r\n            this.setState({winner: \"Player 1\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n          else if(currentStates[r][c] == '2' && currentStates[r][c+1] == '2' && currentStates[r][c+2] == '2' && currentStates[r][c+3] =='2'){\r\n            this.setState({winner: \"Player 2\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n        }\r\n      }\r\n\r\n      //check vertical win\r\n      for(let r = 0; r < 3; r++){\r\n        for(let c = 0; c < 7; c++){\r\n          if(currentStates[r][c] == '1' && currentStates[r+1][c] == '1' && currentStates[r+2][c] == '1' && currentStates[r+3][c] =='1'){\r\n            this.setState({winner: \"Player 1\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n          else if(currentStates[r][c] == '2' && currentStates[r+1][c] == '2' && currentStates[r+2][c] == '2' && currentStates[r+3][c] =='2'){\r\n            this.setState({winner: \"Player 2\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n        }\r\n      }\r\n\r\n      //check diagonal right \r\n      for(let r = 3; r < 6; r++){\r\n        for(let c = 0; c < 4; c++){\r\n          if(currentStates[r][c] == '1' && currentStates[r-1][c+1] == '1' && currentStates[r-2][c+2] == '1' && currentStates[r-3][c+3] =='1'){\r\n            this.setState({winner: \"Player 1\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n          else if(currentStates[r][c] == '2' && currentStates[r-1][c+1] == '2' && currentStates[r-2][c+2] == '2' && currentStates[r-3][c+3] =='2'){\r\n            this.setState({winner: \"Player 2\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n        }\r\n      }\r\n\r\n      //check diagonal left\r\n      for(let r = 3; r < 6; r++){\r\n        for(let c = 3; c < 7; c++){\r\n          if(currentStates[r][c] == '1' && currentStates[r-1][c-1] == '1' && currentStates[r-2][c-2] == '1' && currentStates[r-3][c-3] =='1'){\r\n            this.setState({winner: \"Player 1\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n          else if(currentStates[r][c] == '2' && currentStates[r-1][c-1] == '2' && currentStates[r-2][c-2] == '2' && currentStates[r-3][c-3] =='2'){\r\n            this.setState({winner: \"Player 2\"})\r\n            this.setState({gameOver: true})\r\n            return \r\n          }\r\n        }\r\n      }\r\n\r\n      return\r\n    }\r\n    \r\n    render() {\r\n\r\n      let board = []\r\n      \r\n      for (let r = 0; r < 6; r++) {\r\n          let row = [];\r\n          for (let c = 0; c < 7; c++) { \r\n              row.push(this.renderSquare(r, c))\r\n          }\r\n          board.push(row);\r\n      }\r\n\r\n      if(!this.state.gameOver)\r\n        this.checkWin()\r\n      \r\n        let message = \"\"\r\n      if(!this.state.gameOver){\r\n        message = \"It's \" + (this.state.player1 ? \"player 1's\" : \"player 2's\") + \" turn\"\r\n      }\r\n      else\r\n        message = this.state.winner + \" wins!\"\r\n\r\n      return (\r\n        <div>\r\n          <div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 0)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 1)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 3)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 4)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.getRow(board, 5)}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            {message}\r\n          </div>\r\n        </div>\r\n\r\n      );\r\n    }\r\n  }\r\n\r\nexport default function Game()\r\n{\r\n\r\n    return (\r\n        <div className=\"game-root\">\r\n            <div className=\"game-board\">\r\n                <Board>\r\n\r\n                </Board>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}","import React, { useContext } from 'react';\r\nimport { Text } from '@smooth-ui/core-sc'\r\nimport { AppContext } from '../App'\r\n\r\n\r\nexport default function Footer()\r\n{\r\n\r\n    const { darkModeChecked } = useContext(AppContext)\r\n\r\n    return (\r\n        <div className={ darkModeChecked ? \"footer-root-dark\" : \"footer-root-light\"  }>\r\n            <Text variant=\"h6\" style={{ color: darkModeChecked ? 'white' : \"black\" }} >{\"Composition Digital Media · Spring 2020 · Dilan Ozkaynak & Matt Ludwig\"}</Text>\r\n        </div>\r\n    );\r\n\r\n}","import React, { createContext, useState } from 'react';\r\nimport './App.css';\r\nimport './components/styles.css'\r\nimport NavBar from './components/NavBar'\r\nimport CTAText from './components/CTAText'\r\nimport Game from './components/Game'\r\nimport Footer from './components/Footer'\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport default function App() {\r\n\r\n    const [ darkModeChecked, setDarkModeChecked ] = useState(false)\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppContext.Provider value={{ darkModeChecked, setDarkModeChecked }}>\r\n                <NavBar />\r\n                <div className={ darkModeChecked ? \"body-dark\" : \"body-light\" }>\r\n                    <CTAText />\r\n                    <Game />\r\n                </div>\r\n                <Footer />\r\n            </AppContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ThemeProvider } from 'styled-components'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from '@smooth-ui/core-sc'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}