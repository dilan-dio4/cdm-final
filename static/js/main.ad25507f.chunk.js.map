{"version":3,"sources":["components/NavBar.js","components/CTAText.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","menu","useMenuState","className","variant","aria-label","disabled","CTAText","style","padding","Square","props","state","value","onClick","setState","this","React","Component","Board","boardStates","i","rowStates","j","push","states","handleClick","board","r","row","c","renderSquare","getRow","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAWe,SAASA,IAEtB,IAAMC,EAAOC,cAEX,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,6BACX,kBAAC,IAAD,CAAMC,QAAQ,MAAd,8BACA,oCACI,kBAAC,IAAmBH,EAApB,eACA,kBAAC,IAAD,iBAAUA,EAAV,CAAgBI,aAAW,gBACvB,kBAAC,IAAaJ,EAAd,YACA,kBAAC,IAAD,iBAAcA,EAAd,CAAoBK,UAAQ,IAA5B,cACA,kBAAC,IAAkBL,GACnB,kBAAC,IAAaA,EAAd,0BCrBT,SAASM,IAGpB,OACI,kBAAC,IAAD,CAAMH,QAAQ,YAAYI,MAAO,CAAEC,QAAS,kBAA5C,e,oCCNFC,E,kDACF,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAO,MAHO,E,qDAOR,IAAD,OACP,OACE,4BACEV,UAAU,SACVW,QAAS,kBAAM,EAAKC,SAAS,CAACF,MAAO,QAElCG,KAAKJ,MAAMC,W,GAdHI,IAAMC,WAoBnBC,E,kDAEJ,WAAYR,GAAO,IAAD,sBACd,cAAMA,GAIN,IAFA,IAAIS,EAAc,GAEVC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtB,IADA,IAAIC,EAAY,GACRC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAUE,KAAK,KAEnBJ,EAAYI,KAAKF,GAVP,OAad,EAAKV,MAAQ,CACTa,OAAQL,GAdE,E,gGAsBLC,GACX,OAAO,kBAAC,EAAD,CAAQR,MAAOQ,EAAGP,QAASE,KAAKU,gB,6BAGlCC,EAAON,GACV,OAAOM,EAAMN,K,+BAOb,IAFA,IAAIM,EAAQ,GAEHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAIL,KAAKR,KAAKe,gBAElBJ,EAAMH,KAAKK,GAGjB,OACE,6BACE,yBAAK1B,UAAU,aACZa,KAAKgB,OAAOL,EAAO,IAEtB,yBAAKxB,UAAU,aACZa,KAAKgB,OAAOL,EAAO,IAEtB,yBAAKxB,UAAU,aACZa,KAAKgB,OAAOL,EAAO,IAEtB,yBAAKxB,UAAU,aACZa,KAAKgB,OAAOL,EAAO,IAEtB,yBAAKxB,UAAU,aACZa,KAAKgB,OAAOL,EAAO,IAEtB,yBAAKxB,UAAU,aACZa,KAAKgB,OAAOL,EAAO,S,GA9DVV,IAAMC,WAqEb,SAASe,IAGpB,OACI,yBAAK9B,UAAU,aACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,QC/ED+B,MAXf,WACI,OACI,yBAAK/B,UAAU,OACX,kBAACH,EAAD,MACA,kBAACO,EAAD,MACA,kBAAC0B,EAAD,Q,QCAQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,MAAOA,KACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad25507f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Text } from '@smooth-ui/core-sc'\r\nimport {\r\n    useMenuState,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDisclosure,\r\n    MenuSeparator,\r\n} from '@smooth-ui/core-sc'\r\n\r\n\r\nexport default function NavBar()\r\n{\r\n  const menu = useMenuState()\r\n\r\n    return (\r\n        <div className=\"NavBar-root\">\r\n            <div className=\"NavBar-elements-container\">\r\n                <Text variant=\"h2\">Dilan and Matt's Connect 4</Text>\r\n                <>\r\n                    <MenuDisclosure {...menu}>Preferences</MenuDisclosure>\r\n                    <Menu {...menu} aria-label=\"Preferences\">\r\n                        <MenuItem {...menu}>Settings</MenuItem>\r\n                        <MenuItem {...menu} disabled>Extensions</MenuItem>\r\n                        <MenuSeparator {...menu} />\r\n                        <MenuItem {...menu}>Keyboard shortcuts</MenuItem>\r\n                    </Menu>\r\n                </>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Text } from '@smooth-ui/core-sc'\r\n\r\n\r\nexport default function CTAText()\r\n{\r\n\r\n    return (\r\n        <Text variant=\"display-3\" style={{ padding: '100px 0 8vh 0' }} >Play Below!</Text>\r\n    )\r\n}","import React from 'react'\r\n\r\nclass Square extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        value: null,\r\n      };\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <button \r\n          className=\"square\" \r\n          onClick={() => this.setState({value: 'O'})}\r\n          >\r\n            {this.state.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        let boardStates = []\r\n        \r\n        for(let i = 0; i < 6; i++){\r\n            let rowStates = []\r\n            for(let j = 0; j < 7; j++){\r\n                rowStates.push('0')\r\n            }\r\n            boardStates.push(rowStates)\r\n        }\r\n\r\n        this.state = {\r\n            states: boardStates,\r\n        }\r\n    }\r\n\r\n    handleClick(){\r\n\r\n    }\r\n    \r\n    renderSquare(i) {\r\n      return <Square value={i} onClick={this.handleClick}/>;\r\n    }\r\n\r\n    getRow(board ,i){\r\n        return board[i];\r\n    }\r\n    \r\n    render() {\r\n\r\n        let board = []\r\n        \r\n        for (let r = 0; r < 6; r++) {\r\n            let row = [];\r\n            for (let c = 0; c < 7; c++) { \r\n                row.push(this.renderSquare())\r\n            }\r\n            board.push(row);\r\n        }\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 0)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 1)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 3)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 4)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.getRow(board, 5)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default function Game()\r\n{\r\n\r\n    return (\r\n        <div className=\"game-root\">\r\n            <div className=\"game-board\">\r\n                <Board>\r\n\r\n                </Board>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport './components/styles.css'\r\nimport NavBar from './components/NavBar'\r\nimport CTAText from './components/CTAText'\r\nimport Game from './components/Game'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar />\r\n            <CTAText />\r\n            <Game />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ThemeProvider } from 'styled-components'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from '@smooth-ui/core-sc'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}